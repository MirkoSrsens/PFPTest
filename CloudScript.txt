///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Welcome to your first Cloud Script revision!
//
// Cloud Script runs in the PlayFab cloud and has full access to the PlayFab Game Server API 
// (https://api.playfab.com/Documentation/Server), and it runs in the context of a securely
// authenticated player, so you can use it to implement logic for your game that is safe from
// client-side exploits. 
//
// Cloud Script functions can also make web requests to external HTTP
// endpoints, such as a database or private API for your title, which makes them a flexible
// way to integrate with your existing backend systems.
//
// There are several different options for calling Cloud Script functions:
//
// 1) Your game client calls them directly using the "ExecuteCloudScript" API,
// passing in the function name and arguments in the request and receiving the 
// function return result in the response.
// (https://api.playfab.com/Documentation/Client/method/ExecuteCloudScript)
// 
// 2) You create PlayStream event actions that call them when a particular 
// event occurs, passing in the event and associated player profile data.
// (https://api.playfab.com/playstream/docs)
// 
// 3) For titles using the Photon Add-on (https://playfab.com/marketplace/photon/),
// Photon room events trigger webhooks which call corresponding Cloud Script functions.
// 
// The following examples demonstrate all three options.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

var highscore = "Highscore";
var upgradeValueMultiplyer = 10;
var gold = "GL";
var energy = "EG";
var idString = "Id";
var energyCostOfGame = 5;
var possibleStats = ["MovementSpeed", "WingFlapsStrenght", "GoldMultiplier"]


handlers.PopulateLeaderboard = (args,ctx) => {
    
    let playerId = ctx.playerProfile.PlayerId;

    var score = 0;
    var GetUserReadOnlyDataRequest = {
            PlayFabId: playerId,
            Keys: []
        }; 
    
    var getUserReadOnlyDataResult = server.GetUserReadOnlyData(GetUserReadOnlyDataRequest);
    
    if(getUserReadOnlyDataResult.Data.hasOwnProperty(highscore))
    {
        score = getUserReadOnlyDataResult.Data[highscore].Value;
    }
    
    server.UpdatePlayerStatistics({
        PlayFabId : playerId,
        Statistics : [
            {
                "StatisticName": highscore,
                "Value": score
            }
        ]
    });
}

function SubmitHighscore_internal(score) {
    
    var UpdateUserReadOnlyDataRequest = {
            PlayFabId: currentPlayerId,
            Data: {}
        };
        
    UpdateUserReadOnlyDataRequest.Data[highscore] = Number(Base64Decode(score));
    var UpdateUserReadOnlyDataResult = server.UpdateUserReadOnlyData(UpdateUserReadOnlyDataRequest);
}


handlers.SubmitHighscore = function (args) {
    if (!args || !args.Highscore)
        throw new Error("Invalid input parameters, expected highscore");
    return SubmitHighscore_internal(args.Highscore)
};


function UpgradeStat_Internal(stat) {
    
    if(!possibleStats.includes(stat))
    {
        throw new Error("This is not a valid stats, aborting operation");
    }
    
    var inventory = server.GetUserInventory({PlayFabId: currentPlayerId});
    var goldAmount = inventory.VirtualCurrency[gold];
    
    var GetUserReadOnlyDataRequest = {
            PlayFabId: currentPlayerId,
            Keys: []
        }; 
    var getUserReadOnlyDataResult = server.GetUserReadOnlyData(GetUserReadOnlyDataRequest);
    
    var UpdateUserReadOnlyDataRequest = {
            PlayFabId: currentPlayerId,
            Data: {}
        };
         
        
    var statValue = 0;   
    if(getUserReadOnlyDataResult.Data.hasOwnProperty(stat))
    {
        statValue = getUserReadOnlyDataResult.Data[stat].Value;
    }
    
    // Woah complex payable algoritham much wow, IGN 9/10 "It makes you feel like a Bill Gates."
    var cost = ((statValue * upgradeValueMultiplyer)+ 2)/2;
    
    if(goldAmount < cost)
    {
        throw new Error("Not enought gold to perform upgrade");
    }
    else
    {
        UpdateUserReadOnlyDataRequest.Data[stat] = Number(statValue) + 1;
        
        var UpdateUserReadOnlyDataResult = server.UpdateUserReadOnlyData(UpdateUserReadOnlyDataRequest);
        server.SubtractUserVirtualCurrency({PlayFabId: currentPlayerId, VirtualCurrency: gold, Amount: cost}); 
        
        return 200;
    }
}

handlers.UpgradeStat = function (args) {
    if (!args || !args.Stat)
        throw new Error("Invalid input parameters, expected stat");
    return UpgradeStat_Internal(args.Stat);
};

function UseItem_Internal(ItemId) {
    
    var inventory = server.GetUserInventory({ PlayFabId: currentPlayerId });
    var itemInstance = null;
    for (var i = 0; i < inventory.Inventory.length; i++) {
        if (inventory.Inventory[i].ItemId === ItemId)
            itemInstance = inventory.Inventory[i];
    }
    if (!itemInstance)
        throw new Error( "Item instance not found"); // Protection against client providing incorrect data
    var catalog = server.GetCatalogItems({ CatalogVersion: null });
    var catalogItem = null;
    for (var c = 0; c < catalog.Catalog.length; c++) {
        if (itemInstance.ItemId  === catalog.Catalog[c].ItemId)
            catalogItem = catalog.Catalog[c];
    }
    if (!catalogItem)
        throw new Error( "Catalog Item not found"); // Title catalog consistency check (You should never remove a catalog/catalogItem if any player owns that item
    
    var parse = JSON.parse(catalogItem.CustomData);
    var currencyType = parse.currency;
    var value = parse.value;
    
    server.AddUserVirtualCurrency({ PlayFabId: currentPlayerId, Amount: Number(value), VirtualCurrency: currencyType });
    server.ModifyItemUses({ PlayFabId: currentPlayerId, ItemInstanceId: itemInstance.ItemInstanceId, UsesToAdd: -1 });
}

handlers.UseItem = function (args) {
    if (!args || !args.ItemId)
        throw new Error("Invalid input parameters, expected ItemId");
    UseItem_Internal(args.ItemId);
};

function BuyItem_Internal(ItemId, currencyType) {
    
    var inventory = server.GetUserInventory({PlayFabId: currentPlayerId});
    var currencyAmmount = inventory.VirtualCurrency[currencyType];
    
    // Use latest
    var catalog = server.GetCatalogItems({ CatalogVersion: null });
    var catalogItem = null;
    for (var c = 0; c < catalog.Catalog.length; c++) {
        if (ItemId === catalog.Catalog[c].ItemId)
            catalogItem = catalog.Catalog[c];
    }
    if (!catalogItem)
        throw new Error( "Catalog Item not found"); 
    var buyPrice = 0;
    if (catalogItem.VirtualCurrencyPrices.hasOwnProperty(currencyType))
        buyPrice = catalogItem.VirtualCurrencyPrices[currencyType];
    if (Number(currencyAmmount) - Number(buyPrice) < 0 || buyPrice <= 0)
    {
        throw new Error( "Not enaught " + currencyType + " to buy this item"); 
    }
        
    server.GrantItemsToUser({PlayFabId: currentPlayerId, ItemIds: [ItemId]});
    server.SubtractUserVirtualCurrency({PlayFabId: currentPlayerId, VirtualCurrency: currencyType, Amount: buyPrice}); 
}

handlers.BuyItem = function (args) {
    if (!args || !args.ItemId || !args.currencyType)
        throw new Error("Invalid input parameters, expected ItemId and currencyType");
    BuyItem_Internal(args.ItemId, args.currencyType);
};



function AddCoins_Internal(Id, Amount) {
    
    var GetUserReadOnlyDataRequest = {
            PlayFabId: currentPlayerId,
            Keys: []
        }; 
    var getUserReadOnlyDataResult = server.GetUserReadOnlyData(GetUserReadOnlyDataRequest);
    
   if(!getUserReadOnlyDataResult.Data.hasOwnProperty("Id"))
   {
       throw Error("This run was not registered by server so coins were not added!");
   }
   else if(getUserReadOnlyDataResult.Data["Id"].Value != Id)
   {
       throw Error("This data did not match aborting");
   }
   
   server.AddUserVirtualCurrency({ PlayFabId: currentPlayerId, Amount: Number(Amount), VirtualCurrency: gold });
}

handlers.AddCoins = function (args) {
    if (!args || !args.Id || !args.Amount)
        throw new Error("Invalid input parameters, expected ID and Amount");
    return AddCoins_Internal(args.Id, args.Amount);
};

function CanStartGame_Internal() {
    
    var inventory = server.GetUserInventory({PlayFabId: currentPlayerId});
    var energyAmount = inventory.VirtualCurrency[energy];
        
    if(Number(energyAmount) <= energyCostOfGame)
    {
        throw new Error('Not enaught energy mah dude!'); 
    }
    
    server.SubtractUserVirtualCurrency({PlayFabId: currentPlayerId, VirtualCurrency: energy, Amount: energyCostOfGame}); 
    
    var UpdateUserReadOnlyDataRequest = {
        PlayFabId: currentPlayerId,
        Data: {}
    };
        
    var generatedId = JSON.stringify(uuidv4());
    
    UpdateUserReadOnlyDataRequest.Data[idString] =generatedId;
    var UpdateUserReadOnlyDataResult = server.UpdateUserReadOnlyData(UpdateUserReadOnlyDataRequest);
    
    return generatedId;
}

handlers.CanStartGame = function () {
    return CanStartGame_Internal();
};


function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString();
  });
}


function Base64Decode(encoded) {
   var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
   var output = "";
   var chr1, chr2, chr3;
   var enc1, enc2, enc3, enc4;
   var i = 0;

   do {
      enc1 = keyStr.indexOf(encoded.charAt(i++));
      enc2 = keyStr.indexOf(encoded.charAt(i++));
      enc3 = keyStr.indexOf(encoded.charAt(i++));
      enc4 = keyStr.indexOf(encoded.charAt(i++));

      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;

      output = output + String.fromCharCode(chr1);

      if (enc3 != 64) {
         output = output + String.fromCharCode(chr2);
      }
      if (enc4 != 64) {
         output = output + String.fromCharCode(chr3);
      }
   } while (i < encoded.length);

   return output;
}

// This is a simple example of making a PlayFab server API call
handlers.makeAPICall = function (args, context) {
    var request = {
        PlayFabId: currentPlayerId, Statistics: [{
                StatisticName: "Level",
                Value: 2
            }]
    };
    // The pre-defined "server" object has functions corresponding to each PlayFab server API 
    // (https://api.playfab.com/Documentation/Server). It is automatically 
    // authenticated as your title and handles all communication with 
    // the PlayFab API, so you don't have to write extra code to issue HTTP requests. 
    var playerStatResult = server.UpdatePlayerStatistics(request);
};

// This an example of a function that calls a PlayFab Entity API. The function is called using the 
// 'ExecuteEntityCloudScript' API (https://api.playfab.com/documentation/CloudScript/method/ExecuteEntityCloudScript).
handlers.makeEntityAPICall = function (args, context) {

    // The profile of the entity specified in the 'ExecuteEntityCloudScript' request.
    // Defaults to the authenticated entity in the X-EntityToken header.
    var entityProfile = context.currentEntity;

    // The pre-defined 'entity' object has functions corresponding to each PlayFab Entity API,
    // including 'SetObjects' (https://api.playfab.com/documentation/Data/method/SetObjects).
    var apiResult = entity.SetObjects({
        Entity: entityProfile.Entity,
        Objects: [
            {
                ObjectName: "obj1",
                DataObject: {
                    foo: "some server computed value",
                    prop1: args.prop1
                }
            }
        ]
    });

    return {
        profile: entityProfile,
        setResult: apiResult.SetResults[0].SetResult
    };
};

// This is a simple example of making a web request to an external HTTP API.
handlers.makeHTTPRequest = function (args, context) {
    var headers = {
        "X-MyCustomHeader": "Some Value"
    };
    
    var body = {
        input: args,
        userId: currentPlayerId,
        mode: "foobar"
    };

    var url = "http://httpbin.org/status/200";
    var content = JSON.stringify(body);
    var httpMethod = "post";
    var contentType = "application/json";

    // The pre-defined http object makes synchronous HTTP requests
    var response = http.request(url, httpMethod, content, contentType, headers);
    return { responseContent: response };
};

// This is a simple example of a function that is called from a
// PlayStream event action. (https://playfab.com/introducing-playstream/)
handlers.handlePlayStreamEventAndProfile = function (args, context) {
    
    // The event that triggered the action 
    // (https://api.playfab.com/playstream/docs/PlayStreamEventModels)
    var psEvent = context.playStreamEvent;
    
    // The profile data of the player associated with the event
    // (https://api.playfab.com/playstream/docs/PlayStreamProfileModels)
    var profile = context.playerProfile;
    
    // Post data about the event to an external API
    var content = JSON.stringify({ user: profile.PlayerId, event: psEvent.EventName });
    var response = http.request('https://httpbin.org/status/200', 'post', content, 'application/json', null);

    return { externalAPIResponse: response };
};


// Below are some examples of using Cloud Script in slightly more realistic scenarios

// This is a function that the game client would call whenever a player completes
// a level. It updates a setting in the player's data that only game server
// code can write - it is read-only on the client - and it updates a player
// statistic that can be used for leaderboards. 
//
// A funtion like this could be extended to perform validation on the 
// level completion data to detect cheating. It could also do things like 
// award the player items from the game catalog based on their performance.
handlers.completedLevel = function (args, context) {
    var level = args.levelName;
    var monstersKilled = args.monstersKilled;
    
    var updateUserDataResult = server.UpdateUserInternalData({
        PlayFabId: currentPlayerId,
        Data: {
            lastLevelCompleted: level
        }
    });

    log.debug("Set lastLevelCompleted for player " + currentPlayerId + " to " + level);
    var request = {
        PlayFabId: currentPlayerId, Statistics: [{
                StatisticName: "level_monster_kills",
                Value: monstersKilled
            }]
    };
    server.UpdatePlayerStatistics(request);
    log.debug("Updated level_monster_kills stat for player " + currentPlayerId + " to " + monstersKilled);
};


// In addition to the Cloud Script handlers, you can define your own functions and call them from your handlers. 
// This makes it possible to share code between multiple handlers and to improve code organization.
handlers.updatePlayerMove = function (args) {
    var validMove = processPlayerMove(args);
    return { validMove: validMove };
};


// This is a helper function that verifies that the player's move wasn't made
// too quickly following their previous move, according to the rules of the game.
// If the move is valid, then it updates the player's statistics and profile data.
// This function is called from the "UpdatePlayerMove" handler above and also is 
// triggered by the "RoomEventRaised" Photon room event in the Webhook handler
// below. 
//
// For this example, the script defines the cooldown period (playerMoveCooldownInSeconds)
// as 15 seconds. A recommended approach for values like this would be to create them in Title
// Data, so that they can be queries in the script with a call to GetTitleData
// (https://api.playfab.com/Documentation/Server/method/GetTitleData). This would allow you to
// make adjustments to these values over time, without having to edit, test, and roll out an
// updated script.
function processPlayerMove(playerMove) {
    var now = Date.now();
    var playerMoveCooldownInSeconds = 15;

    var playerData = server.GetUserInternalData({
        PlayFabId: currentPlayerId,
        Keys: ["last_move_timestamp"]
    });

    var lastMoveTimestampSetting = playerData.Data["last_move_timestamp"];

    if (lastMoveTimestampSetting) {
        var lastMoveTime = Date.parse(lastMoveTimestampSetting.Value);
        var timeSinceLastMoveInSeconds = (now - lastMoveTime) / 1000;
        log.debug("lastMoveTime: " + lastMoveTime + " now: " + now + " timeSinceLastMoveInSeconds: " + timeSinceLastMoveInSeconds);

        if (timeSinceLastMoveInSeconds < playerMoveCooldownInSeconds) {
            log.error("Invalid move - time since last move: " + timeSinceLastMoveInSeconds + "s less than minimum of " + playerMoveCooldownInSeconds + "s.");
            return false;
        }
    }

    var playerStats = server.GetPlayerStatistics({
        PlayFabId: currentPlayerId
    }).Statistics;
    var movesMade = 0;
    for (var i = 0; i < playerStats.length; i++)
        if (playerStats[i].StatisticName === "")
            movesMade = playerStats[i].Value;
    movesMade += 1;
    var request = {
        PlayFabId: currentPlayerId, Statistics: [{
                StatisticName: "movesMade",
                Value: movesMade
            }]
    };
    server.UpdatePlayerStatistics(request);
    server.UpdateUserInternalData({
        PlayFabId: currentPlayerId,
        Data: {
            last_move_timestamp: new Date(now).toUTCString(),
            last_move: JSON.stringify(playerMove)
        }
    });

    return true;
}

// This is an example of using PlayStream real-time segmentation to trigger
// game logic based on player behavior. (https://playfab.com/introducing-playstream/)
// The function is called when a player_statistic_changed PlayStream event causes a player 
// to enter a segment defined for high skill players. It sets a key value in
// the player's internal data which unlocks some new content for the player.
handlers.unlockHighSkillContent = function (args, context) {
    var playerStatUpdatedEvent = context.playStreamEvent;
    var request = {
        PlayFabId: currentPlayerId,
        Data: {
            "HighSkillContent": "true",
            "XPAtHighSkillUnlock": playerStatUpdatedEvent.StatisticValue.toString()
        }
    };
    var playerInternalData = server.UpdateUserInternalData(request);
    log.info('Unlocked HighSkillContent for ' + context.playerProfile.DisplayName);
    return { profile: context.playerProfile };
};

// Photon Webhooks Integration
//
// The following functions are examples of Photon Cloud Webhook handlers. 
// When you enable the Photon Add-on (https://playfab.com/marketplace/photon/)
// in the Game Manager, your Photon applications are automatically configured
// to authenticate players using their PlayFab accounts and to fire events that 
// trigger your Cloud Script Webhook handlers, if defined. 
// This makes it easier than ever to incorporate multiplayer server logic into your game.


// Triggered automatically when a Photon room is first created
handlers.RoomCreated = function (args) {
    log.debug("Room Created - Game: " + args.GameId + " MaxPlayers: " + args.CreateOptions.MaxPlayers);
};

// Triggered automatically when a player joins a Photon room
handlers.RoomJoined = function (args) {
    log.debug("Room Joined - Game: " + args.GameId + " PlayFabId: " + args.UserId);
};

// Triggered automatically when a player leaves a Photon room
handlers.RoomLeft = function (args) {
    log.debug("Room Left - Game: " + args.GameId + " PlayFabId: " + args.UserId);
};

// Triggered automatically when a Photon room closes
// Note: currentPlayerId is undefined in this function
handlers.RoomClosed = function (args) {
    log.debug("Room Closed - Game: " + args.GameId);
};

// Triggered automatically when a Photon room game property is updated.
// Note: currentPlayerId is undefined in this function
handlers.RoomPropertyUpdated = function (args) {
    log.debug("Room Property Updated - Game: " + args.GameId);
};

// Triggered by calling "OpRaiseEvent" on the Photon client. The "args.Data" property is 
// set to the value of the "customEventContent" HashTable parameter, so you can use
// it to pass in arbitrary data.
handlers.RoomEventRaised = function (args) {
    var eventData = args.Data;
    log.debug("Event Raised - Game: " + args.GameId + " Event Type: " + eventData.eventType);

    switch (eventData.eventType) {
        case "playerMove":
            processPlayerMove(eventData);
            break;

        default:
            break;
    }
};
